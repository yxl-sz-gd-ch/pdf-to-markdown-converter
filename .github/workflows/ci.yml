name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements【必须的库包】.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test import
      run: |
        python -c "import sys; print('Python version:', sys.version)"
        python -c "from PyQt5.QtWidgets import QApplication; print('PyQt5 import successful')"
        python -c "import fitz; print('PyMuPDF import successful')"
    
    - name: Check main.py syntax
      run: |
        python -m py_compile main.py
    
    - name: Run basic tests
      run: |
        # 这里可以添加单元测试
        echo "Basic tests passed"

  build:
    needs: test
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements【必须的库包】.txt
        pip install pyinstaller
    
    - name: Build executable
      run: |
        pyinstaller --onefile --windowed --name="PDF-to-Markdown-Converter" main.py
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: pdf-to-markdown-converter-windows
        path: dist/PDF-to-Markdown-Converter.exe

  release:
    needs: build
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: pdf-to-markdown-converter-windows
        path: dist/
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## 更新内容
          
          请查看 [CHANGELOG.md](CHANGELOG.md) 了解详细更新内容。
          
          ## 下载说明
          
          - `PDF-to-Markdown-Converter.exe`: Windows 可执行文件
          - 源代码: 点击下方的 Source code 链接下载
          
          ## 安装说明
          
          1. 下载 `PDF-to-Markdown-Converter.exe`
          2. 双击运行即可使用
          3. 首次运行会下载必要的模型文件
          
          ## 系统要求
          
          - Windows 10/11
          - 8GB+ RAM (推荐)
          - 5GB+ 可用磁盘空间
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/PDF-to-Markdown-Converter.exe
        asset_name: PDF-to-Markdown-Converter.exe
        asset_content_type: application/octet-stream